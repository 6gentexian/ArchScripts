#!/bin/bash
#################################################################################
#  CONFIG_FUNCS_TEMPLATE
#  This script creates the script CONFIG_FUNCS - the script used in installing
#  Arch linux.
#  The script reads in the current values for each of the user's customized
#  scripts and pastes them into CONFIG_FUNCS
#
#  Useage: CONFIG_SETUP min  **OR** CONFIG_SETUP reg
#################################################################################

SRC_CONFIG_DIR=~/ARCH/SRC_CONFIG
LOG="${SRC_CONFIG_DIR}/`basename ${0}`_error.log" # LOG FILE


#GLOBAL VARIABLES {{{
  checklist=( 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 )
  # COLORS {{{
    Bold=$(tput bold)
    Underline=$(tput sgr 0 1)
    Reset=$(tput sgr0)
  # Regular Colors
    Red=$(tput setaf 1)
    Green=$(tput setaf 2)
    Yellow=$(tput setaf 3)
    Blue=$(tput setaf 4)
    Purple=$(tput setaf 5)
    Cyan=$(tput setaf 6)
    White=$(tput setaf 7)
  # Bold
    # BRed=${Bold}$(tput setaf 1)
    # BGreen=${Bold}$(tput setaf 2)
    # BYellow=${Bold}$(tput setaf 3)
    # BBlue=${Bold}$(tput setaf 4)
    # BPurple=${Bold}$(tput setaf 5)
    # BCyan=${Bold}$(tput setaf 6)
    # BWhite=${Bold}$(tput setaf 7)

    RESET='\e[0m'           # Text Reset
    BBlack='\e[1;30m'       # Black
    BRed='\e[1;31m'         # Red
    BGreen='\e[1;32m'       # Green
    BYellow='\e[1;33m'      # Yellow
    BBlue='\e[1;34m'        # Blue
    BPurple='\e[1;35m'      # Purple
    BCyan='\e[1;36m'        # Cyan
    BWhite='\e[1;37m'       # White
#}}}

#COMMON FUNCTIONS {{{
  error_msg() { #{{{
    local _msg="${1}"
    echo -e "${_msg}"
    exit 1
  } #}}}
  cecho() { #{{{
    echo -e " $1"
    echo -e " $1" >>"$LOG"
    tput sgr0;
  } #}}}
  ncecho() { #{{{
    echo -ne " $1"
    echo -ne " $1" >>"$LOG"
    tput sgr0
  } #}}}
  spinny() { #{{{
    echo -ne "\b${SPIN:i++%${#SPIN}:1}"
  } #}}}
  progress() { #{{{
    ncecho "  ";
    while true; do
      kill -0 $pid &> /dev/null;
      if [[ $? == 0 ]]; then
	spinny
	sleep 0.25
      else
	ncecho "\b\b";
	wait $pid
	retcode=$?
	echo -ne "$pid's retcode: $retcode" >> $LOG
	if [[ $retcode == 0 ]] || [[ $retcode == 255 ]]; then
	  cecho "  SUCCESS"
	else
	  cecho "  FAILED"
	  echo -e "$PKG" >> $PKG_FAIL
	  tail -n 15 $LOG
	fi
	break
      fi
    done
} #}}}

print_line() { #{{{
  printf "%$(tput cols)s\n"|tr ' ' '-'
} #}}}

print_title() { #{{{
  clear
  print_line
  echo -e "# ${Bold}$1${Reset}"
  print_line

  echo ""
} #}}}

is_package_installed() { #{{{
  #check if a package is already installed
  for PKG in $1; do
    pacman -Q $PKG &> /dev/null && return 0;
  done
  return 1
} #}}}

package_install() { #{{{
  #install packages using pacman
  if [[ $AUTOMATIC_MODE -eq 1 || $VERBOSE_MODE -eq 0 ]]; then
    for PKG in ${1}; do
      local _pkg_repo=`pacman -Sp --print-format %r ${PKG} | uniq | sed '1!d'`
      case $_pkg_repo in
	"core")
	  _pkg_repo="${BRed}${_pkg_repo}${Reset}"
	 ;;
	"extra")
	  _pkg_repo="${BYellow}${_pkg_repo}${Reset}"
	 ;;
	"community")
	  _pkg_repo="${BGreen}${_pkg_repo}${Reset}"
	 ;;
	"multilib")
	  _pkg_repo="${BCyan}${_pkg_repo}${Reset}"
	 ;;
	"archlinuxfr")
	  _pkg_repo="${BPurple}${_pkg_repo}${Reset}"
	;;
      esac

      if ! is_package_installed "${PKG}" ; then
	ncecho " ${BBlue}[${Reset}${Bold}X${BBlue}]${Reset} Installing (${_pkg_repo}) ${Bold}${PKG}${Reset} "
	sudo pacman -S --noconfirm ${PKG} >>"$LOG" 2>&1 &
	pid=$!;progress $pid
      else
	cecho " ${BBlue}[${Reset}${Bold}X${BBlue}]${Reset} Installing (${_pkg_repo}) ${Bold}${PKG}${Reset} exists "
      fi
    done
  else
    sudo pacman -S --noconfirm ${1}
  fi
} #}}}

pause_function() { #{{{
  print_line
  if [[ $AUTOMATIC_MODE -eq 0 ]]; then
    read -e -sn 1 -p "Press enter to continue..."
  fi
} #}}}


################################   basic setup   ################################
install_basic_setup(){

    # NEED TO CONFIG pacman.conf BEFORE WE CAN USE packer
    print_title "BASH, Pacman, Xresources scripts ---------------------------"
    create_bashrc
    create_xresources
    create_xinitrc
    pause_function


    print_title "BASH, Pacman, Xresources ---------------------------------"

    print_title "BASH TOOLS - https://wiki.archlinux.org/index.php/Bash"
    sudo pacman -Syy

    package_install "bc mlocate bash-completion pkgstats pacmatic"
    pause_function

    print_title "Xorg- https://wiki.archlinux.org/index.php/Xorg"
    package_install "xorg-server xorg-server-utils xorg-xinit xorg-xkill xterm  \
		     xf86-input-libinput xorg-fonts-100dpi xorg-fonts-75dpi  \
		     xf86-input-synaptics xf86-input-mouse xf86-input-keyboard  \
		     gamin ntp"
    pause_function

    # IS MIN_INSTALL ?
    if [ "$1" = false ]; then
	print_title "PRINTING via CUPS --------------------------------------------"
	package_install "cups cups-pdf system-config-printer cups-filters"
	pause_function
    fi
}
################################   basic setup   ################################

#################################    .bashrc   ##################################
create_bashrc(){

cat > $1 << 'EOF'

EOF

print_title ".BASH_PROFILE ----------------------------------------------------"
cat > $1 << 'EOF'

EOF
}
#################################    .bashrc   #################################

###############################    .Xresources   ###############################
create_xresources(){

cat > $1 << 'EOF'

EOF
}
###############################    .Xresources   ###############################

#################################    .xinitrc   ################################
create_xinitrc(){

cat > $1 << 'EOF'

EOF
}
#################################    .xinitrc   ################################


###########################    general system tools  ############################
install_system_tools(){

  print_title "SYSTEM TOOLS ---------------------------------------------------"
  package_install "gcc-fortran os-prober sudo time ttf-bitstream-vera \
		   wget xdg-user-dirs auctex aspell-en"
  pause_function

  print_title "ARCH BUILD SYSTEM (ABS) TOOLS  -----------------------------------"
  package_install "abs xmlto docbook-xsl kmod inetutils qt4"
  pause_function

  # IS MIN_INSTALL ?
  if [ "$1" = false ]; then

    print_title "SYSTEM TOOLS ---------------------------------------------------"
    package_install "cpupower lm_sensors lshw lvm2  inxi hddtemp gvfs gvfs-afc \
		     hwdetect hwinfo xsensors xdotool psutils rsync pkg-config"
    pause_function

  fi
}
###########################    general system tools  ###########################


##################################     io     ##################################
config_io(){

cat > ~/60-schedulers.rules << 'EOF'
# set deadline scheduler for non-rotating disks
ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="0", ATTR{queue/scheduler}="deadline"

# set deadline scheduler for rotating disks
ACTION=="add|change", KERNEL=="sd[a-z]", ATTR{queue/rotational}=="1", ATTR{queue/scheduler}="cfq"
EOF

sudo mv ~/60-schedulers.rules /etc/udev/rules.d/
sudo chown root:root /etc/udev/rules.d/60-schedulers.rules
}
##################################     io     ##################################


##################################    swap    ##################################
config_swap(){

cat > ~/99-sysctl.conf << 'EOF'
vm.swappiness=1
vm.vfs_cache_pressure=50
EOF

cat > ~/swappiness << 'EOF'
1
EOF

sudo mv ~/99-sysctl.conf /etc/sysctl.d/
sudo chown root:root /etc/sysctl.d/99-sysctl.conf

sudo mv /proc/sys/vm/swappiness /proc/sys/vm/swappiness.orig
sudo mv ~/swappiness /proc/sys/vm/
sudo chown root:root /proc/sys/vm/swappiness
}
##################################    swap    ##################################


################################    user tools    ##############################
install_user_tools(){

    print_title "USER TOOLS ---------------------------------------------------"
    package_install "filezilla ghostscript galculator git"
    pause_function

  # IS MIN_INSTALL ?
  if [ "$1" = false ]; then
    print_title "USER TOOLS ---------------------------------------------------"
    package_install "brasero chromium feh gimp gparted alsa-plugins alsa-utils \
		     pulseaudio pulseaudio-alsa gsl gv hplip mongodb shutter \
		     xsane"
    pause_function
  fi

}
################################    user tools    #############################


###############################    scripting tools  ############################
install_scripting_tools(){

  print_title "SCRIPTING TOOLS ----------------------------------------------"
  package_install "python python2 php"
  pause_function

  # IS MIN_INSTALL ?
  if [ "$1" = false ]; then
    print_title "SCRIPTING TOOLS ----------------------------------------------"
    package_install "gawk python-nose python-numpy python-pip \
		       python-setuptools python2-nose python2-numpy \
		       python2-pip python2-setuptools wxpython"
    pause_function
  fi

}
###############################    scripting tools  ############################


################################    filetools   ################################
install_filetools(){

  print_title "FILE TOOLS -------------------------------"
  package_install "autofs file filesystem sysfsutils"
  pause_function


  # IS MIN_INSTALL ?
  if [ "$1" = false ]; then
      print_title "FILE TOOLS -------------------------------"
      package_install "dosfstools e2fsprogs exfat-utils fuse fuse-exfat ntfs-3g"
      pause_function
  fi

}
################################    filetools   ################################


###########################    network/compression   ###########################
install_network_compression(){

  print_title "NETWORK AND COMPRESSION TOOLS -------------------------------"
  package_install "nss-mdns unzip zip avahi"
  pause_function

  # IS MIN_INSTALL ?
  if [ "$1" = false ]; then
      print_title "NETWORK AND COMPRESSION TOOLS -------------------------------"
      package_install "xz bzip2 iproute2 p7zip traceroute unrar"
      pause_function
  fi
}
###########################    network/compression   ############################


#################################    Openbox    ################################
config_openbox(){

  mkdir -p ~/.config/openbox/

  print_title "OPENBOX - http://wiki.archlinux.org/index.php/Openbox"
  package_install "openbox obconf obmenu menumaker archlinux-xdg-menu libxslt \
		   lxappearance-obconf oblogout numix-themes leafpad xcompmgr \
		   numlockx spacefm lsof opera tint2 nitrogen terminator"
  pause_function

  print_title "Terminator Config and window scripts  -------------------------"
    config_terminator
    config_terminator_windows
  pause_function

  # IS MIN_INSTALL ?
  if [ "$1" = false ]; then
      print_title "Web browser, email client, Openbox goodies  ---------------"
      package_install "thunderbird turpial conky ruby lua"
      pause_function
  fi

  print_title "OPENBOX Files: menu.xml, rc.xml, autostart, xinitrc, ----------"
    create_menu.xml
    create_rc.xml
    create_autostart
    config_tint2
    create_openbox-pipemenu
  pause_function

}
#################################    Openbox    ################################

#################################    menu.xml   ################################
create_menu.xml(){

cat > $1 << 'EOF'

EOF
}
#################################    menu.xml   ################################

##################################    rc.xml   #################################
create_rc.xml(){

cat > $1 << 'EOF'

EOF
}
##################################    rc.xml   #################################

################################    autostart   ################################
create_autostart(){

# IS MIN_INSTALL ?
if [ "$1" = true ]; then

cat > /home/edward/.config/openbox/autostart <<  'EOF'
# Programs to launch at startup
numlockx &
xcompmgr -c &
(sleep 0.5 && nitrogen --restore) &

## Programs that will run after Openbox has started
(sleep 0.5 && tint2) &


(sleep 1 && /usr/bin/terminator -m -b -l ebg) &
(sleep 2 && /home/edward/bin/sh config.Windows.Terminator.sh)


(sleep 2 && /opt/dropbox/dropbox) &


(sleep 0.5 && /usr/bin/spacefm) &


(sleep 0.5 && /usr/bin/palemoon) &
EOF
else

cat > /home/edward/.config/openbox/autostart << 'EOF'
# Programs to launch at startup
numlockx &
xcompmgr -c &
(sleep 0.5 && nitrogen --restore) &

## Programs that will run after Openbox has started
(sleep 0.5 && tint2) &
(sleep 0.5 && /opt/dropbox/dropbox) &

(sleep 0.5 && /usr/bin/terminator -m -b -l ebg) &
#(sleep 1 && /home/edward/bin/sh config.Windows.Terminator.sh) &


#/usr/bin/firefox &
/usr/bin/palemoon &
(sleep 0.75 && /usr/bin/thunderbird) &

(sleep 1.0 && . ~/bin/conky_start) &
(sleep 0.5 && /usr/bin/spacefm) &

##/usr/bin/rstudio &
##/home/edward/PYTHON/drpython/drpython.pyw &

(sleep 200 && /usr/bin/turpial) &
EOF

fi
}
################################    autostart   ################################

#############################   openbox-pipemenu    #############################
create_openbox-pipemenu(){
cat > ~/bin/openbox-pipemenu << 'EOF'
#!/bin/sh
#################################################################################
PATH=/bin:/usr/bin
{
cat <<EOF

<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xml" href="#stylesheet"?>

<!DOCTYPE doc [
<!ATTLIST xsl:stylesheet
  id    ID      #REQUIRED>
]>

<doc>
  <xsl:stylesheet id="stylesheet" version="1.0"
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

    <xsl:output omit-xml-declaration="yes" />

    <xsl:template match="/doc/openbox_pipe_menu">
      <openbox_pipe_menu>
      <xsl:choose>
	<xsl:when test="count(./menu) = 1">
	  <xsl:copy-of select="./menu/*" />
	</xsl:when>
	<xsl:otherwise>
	  <xsl:copy-of select="*" />
	</xsl:otherwise>
      </xsl:choose>
      </openbox_pipe_menu>
    </xsl:template>

    <xsl:template match="xsl:stylesheet" />

  </xsl:stylesheet>

EOF
xdg_menu --format openbox3-pipe "$@"
printf "</doc>\n"
} | xsltproc --nonet --novalid -

EOF
}

chmod +x ~/bin/openbox-pipemenu
#############################   openbox-pipemenu    #############################

##################################     tint2     ################################
config_tint2(){

print_title "tint2  -----------------------------------------------------------"
mkdir -p ~/.config/tint2

cat > $1 << 'EOF'

EOF

print_title "CONFIG tint2confrc -----------------------------------------------"
cat > $1 << 'EOF'

EOF
}
##################################     tint2     ################################

###############################    terminator    ###############################
config_terminator(){

mkdir -p ~/.config/terminator

cat > $1 << 'EOF'

EOF
}
###############################    terminator    ###############################

#########################    terminator_windows    #############################
config_terminator_windows(){

cat > $1 << 'EOF'

EOF
}
#########################    terminator_windows    #############################


###################################    SSH    #################################
config_ssh(){

print_title "SSH - SSHD CONFIGURATION  ---------------------------------------"
cat > $1  << 'EOF'

EOF


mkdir -p ~/.ssh
touch ~/.ssh/authorized_keys

sudo mv /etc/ssh/sshd_config etc/ssh/sshd_config.orig
sudo mv ~/sshd_config  /etc/ssh/sshd_config
sudo chown root:root /etc/ssh/sshd_config
}
###################################    SSH    #################################


##################################    emacs    ################################
config_emacs(){

print_title "CONFIG .emacs --------------------------------------------------"
mkdir -p ~/.emacs.d
mv ~/.emacs ~/.emacs.d/.emacs.orig

cat > $1 << 'EOF'

EOF

print_title "CONFIG .emacs.d/custom.el  ----------------------------------------"
cat > $1 <<  'EOF'

EOF

print_title "CONFIG .emacs.d/my-modeline.el  -----------------------------------"
cat > $1 << 'EOF'

EOF

print_title "CONFIG .emacs.d/my-modes.el  --------------------------------------"
cat > $1 << 'EOF'

EOF

print_title "CONFIG .emacs.d/my-packages.el  -----------------------------------"
cat > $1 << 'EOF'

EOF
}
##################################    emacs    ###############################


################################   final setup   ################################
install_final_setup(){

    # NEED TO CONFIG pacman.conf BEFORE WE CAN USE packer
    print_title "Finalize pacman.conf and other resources ----------------------"
    config_pacman.conf
    pause_function

    sudo pacman -Syy

    print_title "Dropbox from archfr? and Palemoon from packer -----------------"
    package_install "dropbox"
    pause_function


    ## Build Packer Package
    ## Create a temporary directory for the installation.
    cd ~/TMP
    mkdir packer

    ## Change current directory to the temporary installation directory.
    cd packer

    ## Download packer package build script from AUR.
    sudo wget https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=packer

    ## Rename the downloaded file.
    mv PKGBUILD* PKGBUILD

    ## Install Packer, dependencies if needed.
    sudo pacman -S jshon expac

    ## Compile the package using PKGBUILD.
    makepkg

    sudo pacman -U packer-2*tar.xz

    packer -S palemoon-bin
    pause_function
}
################################   final setup   ################################

#############################    /etc/pacman.conf   ############################
config_pacman.conf(){

cat > $1 << 'EOF'

EOF

sudo chown root:root ~/pacman.conf
sudo mv /etc/pacman.conf /etc/pacman.conf.orig
sudo mv ~/pacman.conf /etc
}
#############################    /etc/pacman.conf   ############################
